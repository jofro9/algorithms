Question 3

Self-balancing binary search tree

We know that binary search trees run all operations add, delete, get, and nearest in O(n). Where n is at least the height of the tree.
Further more, if we maintain a balanced tree, then those operations are no longer O(n) because the maximum traversal is still the height
of the tree, but now the tree balances, so the heigh of the tree is at most log2(n). There for we conclude that a balancing binary search
tree is O(logn).

Example: N = 4, log2(N) = 2

	Binary Search Tree worst case scenario:

	1
	 \
	  2
	   \
	    3
	     \
              4

	Time (= height): O(4)

	Balanced Binary Search Tree:

		1
	       / \
	      3   2
		   \
		    4

	Time (= height): O(2)
		